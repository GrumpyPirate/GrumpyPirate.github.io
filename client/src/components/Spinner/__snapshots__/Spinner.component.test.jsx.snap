// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Components Spinner should render as expected, without crashing 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <Spinner
    isLoading={true}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "host",
    "props": Object {
      "children": Array [
        <figure
          className="spinner__icon"
        >
          <Icon
            altText="Loading..."
            className="icon"
            glyph="loader"
          />
        </figure>,
        <h6
          className="spinner__loading-text"
        >
          Loading...
        </h6>,
      ],
      "className": "spinner spinner--is-loading",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": <Icon
            altText="Loading..."
            className="icon"
            glyph="loader"
          />,
          "className": "spinner__icon",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "altText": "Loading...",
            "className": "icon",
            "glyph": "loader",
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": "figure",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {
          "children": "Loading...",
          "className": "spinner__loading-text",
        },
        "ref": null,
        "rendered": "Loading...",
        "type": "h6",
      },
    ],
    "type": "div",
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "host",
      "props": Object {
        "children": Array [
          <figure
            className="spinner__icon"
          >
            <Icon
              altText="Loading..."
              className="icon"
              glyph="loader"
            />
          </figure>,
          <h6
            className="spinner__loading-text"
          >
            Loading...
          </h6>,
        ],
        "className": "spinner spinner--is-loading",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": <Icon
              altText="Loading..."
              className="icon"
              glyph="loader"
            />,
            "className": "spinner__icon",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "altText": "Loading...",
              "className": "icon",
              "glyph": "loader",
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": "figure",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {
            "children": "Loading...",
            "className": "spinner__loading-text",
          },
          "ref": null,
          "rendered": "Loading...",
          "type": "h6",
        },
      ],
      "type": "div",
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
    "attachTo": undefined,
    "hydrateIn": undefined,
  },
}
`;
